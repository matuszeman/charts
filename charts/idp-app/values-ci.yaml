global:
  cluster: test

  appVersion: 0.1.0

  idpAppConfig:
    imageRepositories:
      private: 123456.dkr.ecr.eu-central-1.amazonaws.com
      public: public.ecr.aws/123456
      docker.io: "docker.io"
    clusters:
      test:
        aws_region: eu-central-1
        domains:
          example.com: example.com
        nodeSelector:
          environment: test
        tolerations:
          - key: environment
            operator: Equal
            value: test
            effect: NoSchedule

    defaults:
      imageRepository: private
      imagePullPolicy: IfNotPresent
      ingress:
        enabled: false
        #className: null
        certManagerClusterIssuer: default
        #  fcgi:
        #    documentRoot: /html
        path: /
        #rewriteTarget: /api
        annotations: { }
        basicAuth:
          enabled: false
          secretName:
        oauth2ProxyAuth:
          enabled: false
          url: null
          # overwrites url for signin url when specified
          urlExternal: null
          # https://oauth2-proxy.github.io/oauth2-proxy/features/endpoints#auth
          allowedGroups: null # []
          responseHeaders:
            - Auth-Proxy-Email
            - Auth-Proxy-Groups
          path: /oauth2
          service:
            name: null
            port: 80
        accessLog:
          enabled: true
      configs:
        externalSecret:
          # reload of external-secret using annotation stopped working with refreshInterval=0
          # we set it to very long period now, so it does not reload, but annotations work
          # https://github.com/external-secrets/external-secrets/pull/4086
          # https://github.com/external-secrets/external-secrets/issues/3979
          refreshInterval: "99999h"

appName: app-name
appVersion: "{{ .Values.global.appVersion }}"
resourceNameSuffix: "resource-suffix"

service:
  enabled: true
  port: 80
  targetPort: apache
  additionalPorts:
    - name: anotherport
      port: 9000
      targetPort: anotherport

deployment:
  enabled: true
#  kind: StatefulSet
#  multi:
#    one: {}
#    two:
#      containers:
#        app:
#          command: [twocommand]

job:
  enabled: false

cronjob:
  enabled: false
  # https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax
  schedule: "@hourly"

configs:
  app:
    content:
      file1: file1 content
      plaintextkey: sometext
  scripts:
    # Octal are translated to decimal
    # https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#set-posix-permissions-for-secret-keys
    defaultMode: 0777
    content:
      script.sh: |
        #!/bin/sh
        echo Works
  app-secrets:
    defaultMode: 0400
    awsSecret:
      arn: arn:aws:iam::123456789012:role/external-secrets
      versionId: a1b2c3d4-5678-90ab-cdef-EXAMPLE22222
  app-secrets-manual:
    awsSecret:
      arn: arn:aws:iam::123456789012:role/external-secrets-manual
      updateHash: 1234
  php:
    content:
      php.ini: |
        memory_limit = 256M
        max_execution_time = 180
  not-mounted-as-volume-in-pod:
    content:
      nothing: none
  hashed-cm:
    hashSuffix: true
    content:
      some: value
  hashed-aws-secret:
    hashSuffix: true
    awsSecret:
      arn: arn:aws:iam::123456789012:role/external-secrets
  not-managed-cm:
    fromConfigMap: "{{ .Release.Name }}-not-managed-cm"
  not-managed-secret:
    fromSecret: "{{ .Release.Name }}-not-managed-secret"
#  sealed-secret:
#    sealedSecret:
#      encryptedData:
#        key1: encryptedvalue

volumes:
  ephemeral-app-cache:
    emptyDir:
      sizeLimit: 10Mi
  some-files:
    persistentVolumeClaim:
      claimName: pvc-files

#nodeCapacity:
#  type: OnDemand
#
#topologySpreadConstraints:
#  zone: false
#  node: false

#terminationGracePeriodSeconds: 60

containers:
  app:
    image: test-server
    imageTag: 0.1.0
    command:
      - customcmdquoted
    args:
      - --quoted=arg1
      - --quoted arg2
    containerPort: 9000
    additionalPorts:
      - name: anotherport
        containerPort: 9000

    configDirs:
      app: /app-config
      app-secrets: /app-secrets
      app-secrets-manual: /app-secrets-manual
      not-managed-secret: /not-managed-secret
      scripts: /scripts
      hashed-cm: /hashed-cm
      hashed-aws-secret: /hashed-aws-secret
#      sealed-secret: /sealed-secrets

    configFiles:
      php:
        php.ini: /etc/php.ini
      not-managed-cm:
        example.txt: /tmp/example.txt
#      sealed-secret:
#        key1: /tmp/secret.txt

    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
    livenessProbe:
      httpGet:
        path: /
        port: app
    readinessProbe:
      httpGet:
        path: /
        port: app
    startupProbe:
      httpGet:
        path: /
        port: app
      failureThreshold: 30
      periodSeconds: 10
    lifecycle:
      preStop:
        exec:
          command: ["/bin/sh", "-c", "echo 'preStop hook'"]

    env:
      stringValue: string
      intValue: 123
      floatValue: 456.789
      # appEnv scalar values, configMapKeyRef.name, secretKeyRef.name are parsed using tpl function
      # https://helm.sh/docs/howto/charts_tips_and_tricks/#using-the-tpl-function
      templatedValue: "value-{{ .Release.Name }}"
      configFromConfigContent:
        config:
          name: app
          key: plaintextkey
      configFromAwsSecret:
        config:
          name: app-secrets
          key: somekey
      configFromConfigMap:
        config:
          name: not-managed-cm
          key: somekey
      configFromSecret:
        config:
          name: not-managed-secret
          key: somekey
      secretKeyValue:
        secretKeyRef:
          name: app-secrets
          key: some-key
      secretKeyTemplatedValue:
        secretKeyRef:
          name: "app-secrets-{{ .Release.Name }}"
          key: secret-key
      configKeyValue:
        configMapKeyRef:
          name: "app-config"
          key: cm-key
      configKeyTemplatedValue:
        configMapKeyRef:
          name: "app-config-{{ .Release.Name }}"
          key: cm-key

    volumeMounts:
      ephemeral-app-cache:
        mountPath: /app/public/var

    volumeFiles:
      some-files:
        readonly-by-default.yaml:
          mountPath: /app/public/readonly-by-default.yaml
        readonly.yaml:
          mountPath: /app/public/readonly.yaml
        writable.yaml:
          mountPath: /app/public/writable.yaml
          readOnly: false

  apache:
    image: idp-example-web-app-apache
    imageTag: 0.1.0
    containerPort: 80
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
    livenessProbe:
      httpGet:
        path: /
        port: apache
    readinessProbe:
      httpGet:
        path: /
        port: apache
  logging:
    image: logging
    imageTag: 1.0.0
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
affinity:
  podAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: security
              operator: In
              values:
                - S1
        topologyKey: topology.kubernetes.io/zone
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: security
                operator: In
                values:
                  - S2
          topologyKey: topology.kubernetes.io/zone

podDisruptionBudget:
  maxUnavailable: 0

autoscaling:
  enabled: true
  maxReplicas: 10

prometheus:
  port: prometheus-exporter
  path: /metrics
  serviceMonitor:
    enabled: true

ingress:
  enabled: true
  className: nginx-external
  domain: example.com
  host: test
  path: /somepath
  rewriteTarget: /api
  annotations:
    nginx.ingress.kubernetes.io/use-regex: true
  fcgi:
    documentRoot: /html
  basicAuth:
    enabled: true
    secretName: test-basic-auth

serviceAccount:
  awsRoleArn: arn:aws:iam::123456789012:role/test-role
  create: true
  #name: test-service-account
