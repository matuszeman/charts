when sealedSecret is specified (with content too), then generate SealedSecret, do not generate ConfigMap:
  1: |
    apiVersion: bitnami.com/v1alpha1
    kind: SealedSecret
    metadata:
      annotations:
        sealedsecrets.bitnami.com/namespace-wide: "true"
        some: annotation
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: app-name
        app.kubernetes.io/version: 0.1.0
      name: RELEASE-NAME-config-sealed-secret
    spec:
      encryptedData:
        key1: encryptedvalue
      template:
        metadata:
          annotations:
            sealedsecrets.bitnami.com/namespace-wide: "true"
            some: annotation
          labels:
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: app-name
            app.kubernetes.io/version: 0.1.0
          name: RELEASE-NAME-config-sealed-secret
  2: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: app-name
        app.kubernetes.io/version: 0.1.0
      name: RELEASE-NAME
    spec:
      replicas: 1
      revisionHistoryLimit: 1
      selector:
        matchLabels:
          app.kubernetes.io/instance: RELEASE-NAME
          app.kubernetes.io/name: app-name
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/name: app-name
        spec:
          containers:
            - env:
                - name: sealed-secret-env
                  valueFrom:
                    secretKeyRef:
                      key: key1
                      name: RELEASE-NAME-config-sealed-secret
              image: 123456.dkr.ecr.eu-central-1.amazonaws.com/test-server:0.1.0
              imagePullPolicy: IfNotPresent
              livenessProbe:
                httpGet:
                  path: /
                  port: app
              name: app
              ports:
                - containerPort: 80
                  name: app
                  protocol: TCP
              readinessProbe:
                httpGet:
                  path: /
                  port: app
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
              volumeMounts:
                - mountPath: /sealed-secret
                  name: config-sealed-secret
                  readOnly: true
                - mountPath: /tmp/secret.txt
                  name: config-sealed-secret
                  readOnly: true
                  subPath: key1
          enableServiceLinks: false
          nodeSelector: null
          securityContext:
            sysctls:
              - name: net.ipv4.ip_unprivileged_port_start
                value: "0"
          serviceAccountName: RELEASE-NAME
          tolerations: null
          topologySpreadConstraints:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: RELEASE-NAME
                  app.kubernetes.io/name: app-name
              maxSkew: 1
              topologyKey: topology.kubernetes.io/zone
              whenUnsatisfiable: ScheduleAnyway
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: RELEASE-NAME
                  app.kubernetes.io/name: app-name
              maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: ScheduleAnyway
          volumes:
            - name: config-sealed-secret
              secret:
                secretName: RELEASE-NAME-config-sealed-secret
