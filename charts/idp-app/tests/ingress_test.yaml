suite: ingress
templates:
  - ingress.yaml
values:
  - values/minimum.yaml
tests:
  - it: should match snapshot with values-ci.yaml
    values:
      - ../values-ci.yaml
    asserts:
      - matchSnapshot: {}
  - it: when ingress is enabled but not service
    values:
      - values/ingress-minimum.yaml
    asserts:
      - failedTemplate:
          errorMessage: "ingress: service must be enabled"
  - it: when multi deployment
    values:
      - values/deployment.yaml
      - values/service.yaml
      - values/multi.yaml
    asserts:
      - matchSnapshot: {}
  - it: when ingress and ingresses are set
    values:
      - values/deployment.yaml
      - values/service.yaml
    set:
      ingress:
        enabled: true
        className: nginx-external
        domain: example.com
        host: testapp-default
      ingresses:
        external:
          enabled: true
          className: nginx-external
          domain: example.com
          host: testapp-external
          oauth2ProxyAuth:
            enabled: true
            url: https://auth.example.com
            allowedGroups:
              - one@example.com
        internal:
          enabled: true
          domain: example.com
          host: testapp-internal
          accessLog:
            enabled: false
          basicAuth:
            enabled: true
            secretName: basic-auth


    asserts:
      - matchSnapshot: { }
  - it: can disable accessLog
    values:
      - values/deployment.yaml
      - values/service.yaml
      - values/ingress-minimum.yaml
    set:
      ingress:
        accessLog:
          enabled: false
    asserts:
      - isSubset:
          path: metadata.annotations
          content:
            nginx.ingress.kubernetes.io/enable-access-log: "false"
  - it: when oauth2ProxyAuth is enabled on path
    values:
      - values/deployment.yaml
      - values/service.yaml
      - values/ingress-minimum.yaml
    set:
      ingress:
        oauth2ProxyAuth:
          enabled: true
          service:
            name: my-oauth2-proxy
    asserts:
      - matchSnapshot: {}
  - it: when oauth2ProxyAuth is enabled on url
    values:
      - values/deployment.yaml
      - values/service.yaml
      - values/ingress-minimum.yaml
    set:
      ingress:
        oauth2ProxyAuth:
          enabled: true
          url: https://auth.example.com
          allowedGroups:
            - one@example.com
            - two@example.com
    asserts:
      - matchSnapshot: { }
  - it: when oauth2ProxyAuth with externalUrl
    values:
      - values/deployment.yaml
      - values/service.yaml
      - values/ingress-minimum.yaml
    set:
      ingress:
        oauth2ProxyAuth:
          enabled: true
          url: http://oauth2proxy.devsup.svc.cluster.local
          urlExternal: https://auth.example.com
    asserts:
      - matchSnapshot: { }
  - it: when oauth2ProxyAuth with templated externalUrl, then $ global var is resolvable
    values:
      - values/deployment.yaml
      - values/service.yaml
      - values/ingress-minimum.yaml
    set:
      ingress:
        oauth2ProxyAuth:
          enabled: true
          url: http://oauth2proxy.devsup.svc.cluster.local
          urlExternal: https://auth.{{ $.Values.global.cluster }}.example.com
    asserts:
      - isSubset:
          path: metadata.annotations
          content:
            nginx.ingress.kubernetes.io/auth-signin: "https://auth.test.example.com/oauth2/start?rd=https://$host$request_uri"
  - it: when oauth2ProxyAuth with templated externalUrl, then .cluster var is resolvable
    values:
      - values/deployment.yaml
      - values/service.yaml
      - values/ingress-minimum.yaml
    set:
      global:
        idpAppConfig:
          clusters:
            test:
              oauth2ProxyAuth:
                urlExternal: https://auth.test-222.example.com
      ingress:
        oauth2ProxyAuth:
          enabled: true
          url: http://oauth2proxy.devsup.svc.cluster.local
          urlExternal: "{{ .cluster.oauth2ProxyAuth.urlExternal }}"
    asserts:
      - isSubset:
          path: metadata.annotations
          content:
            nginx.ingress.kubernetes.io/auth-signin: "https://auth.test-222.example.com/oauth2/start?rd=https://$host$request_uri"
  - it: when both service.enabled and ingress.service is set, then fail
    values:
      - values/deployment.yaml
      - values/service.yaml
    set:
      ingress:
        enabled: true
        className: nginx-internal
        domain: example.com
        host: existing-service
        service:
          name: existing-service
          port: 80
    asserts:
      - failedTemplate:
          errorMessage: "ingress: both service.enabled and ingress.service is set"
  - it: when service is disabled and ingress service is set
    set:
      ingress:
        enabled: true
        className: nginx-internal
        domain: example.com
        host: existing-service
        service:
          name: existing-service
          port: 80
    asserts:
      - matchSnapshot: { }
  - it: ingress service is templated
    set:
      ingress:
        enabled: true
        className: nginx-internal
        domain: example.com
        host: existing-service
        service:
          name: "{{ .Release.Name }}-existing-service"
          port: 80
    asserts:
      - isSubset:
          path: spec.rules[0].http.paths[0].backend.service
          content:
            name: RELEASE-NAME-existing-service
            port:
              number: 80