{{- if not .Values.debug -}}
{{- $values := .Values }}
{{- $defaults := $values.global.idpAppConfig.defaults }}
{{- $cluster := required "cluster does not exist in cluster list" (index .Values.global.idpAppConfig.clusters .Values.global.cluster) }}
{{- $secretStore := false }}
{{- range $configKey, $configSpec := .Values.configs }}
{{- if or .fromSecret .fromConfigMap }}
{{- else if .sealedSecret }}
{{- with .sealedSecret }}
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: {{ include "idp-app.configName" (list $ $configKey) }}
  {{- $annotations := merge (dict) $defaults.configs.annotations (default $configSpec.annotations dict) }}
  {{- if .scope }}
  {{- $annotations = merge $annotations (dict (printf "sealedsecrets.bitnami.com/%s" .scope ) "true")}}
  {{- end }}
  {{- with $annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "idp-app.labels" $ | nindent 4 }}
spec:
  encryptedData:
    {{- toYaml (required ".sealedSecret.encryptedData required" .encryptedData) | nindent 4 }}
  template:
    metadata:
      name: {{ include "idp-app.configName" (list $ $configKey) }}
      {{- with $annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "idp-app.labels" $ | nindent 8 }}
{{- end }}
{{- else if .awsSecret }}
{{- $secretStore = true }}
{{- with .awsSecret }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ include "idp-app.configName" (list $ $configKey) }}
  labels:
    {{- include "idp-app.labels" $ | nindent 4 }}
  {{- $annotations := merge (dict) $defaults.configs.annotations (default $configSpec.annotations dict) (dict "values-hash" $configSpec.valuesHash) }}
  {{- with $annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  refreshInterval: {{ default (required "defaults.configs.externalSecret.refreshInterval required" $defaults.configs.externalSecret.refreshInterval) .refreshInterval | quote }}
  secretStoreRef:
    name: {{ include "idp-app.fullname" $ }}-config-secretsmanager
    kind: SecretStore
  target:
    name: {{ include "idp-app.configName" (list $ $configKey) }}
    creationPolicy: Owner
    template:
      engineVersion: "v2"
      metadata:
        labels:
          {{- include "idp-app.labels" $ | nindent 10 }}
  dataFrom:
    - extract:
        conversionStrategy: Default
        decodingStrategy: None
        metadataPolicy: None
        key: {{ required (printf "configs.%s.awsSecret.arn required" $configKey) .arn }}
        {{- with .versionId }}
        version: uuid/{{ . | toString }}
        {{- end }}
{{- end }}
{{- else }}
{{- $_ := required (printf "configs.%s.content required (or set .fromSecret, .fromConfigMap)" $configKey) .content }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "idp-app.configName" (list $ $configKey) }}
  labels:
    {{- include "idp-app.labels" $ | nindent 4 }}
  {{- $annotations := merge (dict) $defaults.configs.annotations (default $configSpec.annotations dict) }}
  {{- with $annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
{{- range $contentKey, $v := $configSpec.content }}
  {{- $rawValue := $v | required (printf "configs.%s.content.%s required" $configKey $contentKey ) | toString }}
  {{- $tplCtx := merge dict (mustDeepCopy $) (dict "configKey" $configKey "configSpec" $configSpec "contentKey" $contentKey) }}
  {{- $val := ($configSpec.templated | default false) | ternary (tpl $rawValue $tplCtx) $rawValue }}
  {{ $contentKey }}:
    {{- toYaml $val | nindent 4 }}
{{- end }}
{{- end }}
{{- end }}
{{- if $secretStore }}
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: {{ include "idp-app.fullname" $ }}-config-secretsmanager
  labels:
    {{- include "idp-app.labels" $ | nindent 4 }}
  {{- $annotations := merge (dict) $defaults.configs.annotations }}
  {{- with $annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  provider:
    aws:
      service: SecretsManager
      region: {{ required "$cluster.aws_region required" $cluster.aws_region }}
      auth:
        jwt:
          serviceAccountRef:
            name: {{ include "idp-app.serviceAccountName" $ }}
{{- end }}
{{- end }}